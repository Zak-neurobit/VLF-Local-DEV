version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - vlf-website
      - hodos-platform
    restart: always
    networks:
      - production-network

  # VLF Website
  vlf-website:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - REDIS_URL=redis://redis:6379
      - HODOS_API_URL=http://hodos-platform:3001
      - HODOS_API_KEY=${HODOS_API_KEY}
    depends_on:
      - postgres
      - redis
    restart: always
    networks:
      - production-network

  # HODOS Platform
  hodos-platform:
    build:
      context: /Users/williamvasquez/Documents/HODOS/HODOS
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/hodos
      - REDIS_URL=redis://redis:6379
      - VLF_WEBSITE_URL=http://vlf-website:3000
      - VLF_API_KEY=${VLF_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mongodb
      - redis
    restart: always
    networks:
      - production-network

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=vlf_website
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always
    networks:
      - production-network

  # MongoDB
  mongodb:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_DATABASE=hodos
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongo-data:/data/db
    restart: always
    networks:
      - production-network

  # Redis
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - production-network

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
    volumes:
      - ./backups:/backups
    depends_on:
      - postgres
      - mongodb
    restart: always
    networks:
      - production-network

volumes:
  postgres-data:
  mongo-data:
  redis-data:

networks:
  production-network:
    driver: bridge
