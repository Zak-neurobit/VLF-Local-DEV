#!/usr/bin/env tsx

import { prisma } from '../src/lib/prisma';
import { logger } from '../src/lib/safe-logger';

async function checkNewsPosts() {
  try {
    // Connect to database
    await prisma.$connect();

    logger.info('Checking blog posts created by news monitor...');

    // Get posts created by the automated system
    const automatedPosts = await prisma.blogPost.findMany({
      where: {
        metadata: {
          path: ['autoGenerated'],
          equals: true,
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
      take: 10,
      select: {
        id: true,
        title: true,
        slug: true,
        category: true,
        publishedAt: true,
        createdAt: true,
        status: true,
        metadata: true,
      },
    });

    logger.info(`Found ${automatedPosts.length} automated posts`);

    // Display posts
    automatedPosts.forEach((post, index) => {
      console.log(`\n${index + 1}. ${post.title}`);
      console.log(`   Slug: ${post.slug}`);
      console.log(`   Category: ${post.category}`);
      console.log(`   Status: ${post.status}`);
      console.log(`   Published: ${post.publishedAt?.toLocaleString()}`);
      console.log(`   Source: ${(post.metadata as any)?.source || 'Unknown'}`);
      console.log(`   URL: http://localhost:3000/blog/${post.slug}`);
    });

    // Get total count
    const totalCount = await prisma.blogPost.count({
      where: {
        metadata: {
          path: ['autoGenerated'],
          equals: true,
        },
      },
    });

    console.log(`\nTotal automated posts in database: ${totalCount}`);

    // Check posts by category
    const categoryCounts = await prisma.blogPost.groupBy({
      by: ['category'],
      where: {
        metadata: {
          path: ['autoGenerated'],
          equals: true,
        },
      },
      _count: {
        id: true,
      },
    });

    console.log('\nPosts by category:');
    categoryCounts.forEach(cat => {
      console.log(`  ${cat.category}: ${cat._count.id} posts`);
    });
  } catch (error) {
    logger.error('Error checking news posts:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the check
checkNewsPosts().catch(console.error);
