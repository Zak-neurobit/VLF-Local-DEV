name: Deploy to Production

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - production-canary
      skip_tests:
        description: 'Skip comprehensive testing (emergency deploy only)'
        required: false
        default: false
        type: boolean

concurrency:
  group: deploy-production-${{ github.ref }}
  cancel-in-progress: false # Never cancel production deployments

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  pre-deployment-gate:
    name: Pre-deployment Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      deployment-approved: ${{ steps.approval.outputs.approved }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Run comprehensive test suite
        run: |
          echo "üß™ Running comprehensive pre-production tests..."
          
          # Critical checks that must pass
          npm run lint
          npm run type-check
          npm run test:coverage
          
          # Build verification
          npm run build

      - name: Security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level=high
          
          # Check for common security issues
          if grep -r "console.log\|console.error\|debugger" src/ --exclude-dir=node_modules; then
            echo "‚ö†Ô∏è Debug statements found in source code"
            echo "Please remove before production deployment"
            exit 1
          fi

      - name: Performance baseline check
        run: |
          echo "‚ö° Checking performance baseline..."
          # This would typically involve more sophisticated performance testing
          # For now, we ensure the build completes within reasonable time
          timeout 300 npm run build || (echo "‚ùå Build took too long" && exit 1)
          echo "‚úÖ Build performance acceptable"

      - name: Environment validation
        run: |
          echo "üîß Validating production environment setup..."
          # Ensure production environment variables are properly configured
          if [ -z "${{ secrets.DATABASE_URL }}" ]; then
            echo "‚ùå DATABASE_URL secret not configured"
            exit 1
          fi
          if [ -z "${{ secrets.NEXTAUTH_SECRET }}" ]; then
            echo "‚ùå NEXTAUTH_SECRET not configured"
            exit 1
          fi
          echo "‚úÖ Required secrets are configured"

      - name: Database migration check
        run: |
          echo "üóÑÔ∏è  Checking database migrations..."
          # In a real setup, you'd check if migrations are needed
          echo "‚úÖ Database migration check completed"

      - name: Final approval
        id: approval
        run: |
          echo "approved=true" >> $GITHUB_OUTPUT
          echo "‚úÖ All pre-deployment checks passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-gate]
    if: always() && (needs.pre-deployment-gate.outputs.deployment-approved == 'true' || github.event.inputs.skip_tests == 'true')
    timeout-minutes: 20
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Production
        id: deploy
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production-canary" ]]; then
            echo "üê§ Deploying to production canary..."
            url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          else
            echo "üöÄ Deploying to production..."
            url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Production deployment URL: $url"

      - name: Create deployment record
        run: |
          echo "## üöÄ Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ‚úÖ Successful" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY

  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Wait for deployment propagation
        run: |
          echo "‚è≥ Waiting for deployment to propagate globally..."
          sleep 60 # Give CDN time to propagate

      - name: Comprehensive health checks
        run: |
          echo "üè• Running comprehensive health checks..."
          url="${{ needs.deploy-production.outputs.url }}"
          
          # Test main page accessibility
          for i in {1..5}; do
            if curl -sf "$url" > /dev/null; then
              echo "‚úÖ Main page accessible (attempt $i)"
              break
            elif [ $i -eq 5 ]; then
              echo "‚ùå Main page not accessible after 5 attempts"
              exit 1
            else
              echo "‚è≥ Waiting for main page... (attempt $i/5)"
              sleep 10
            fi
          done
          
          # Test API endpoints
          if curl -sf "$url/api/health" > /dev/null; then
            echo "‚úÖ Health API endpoint working"
          else
            echo "‚ö†Ô∏è Health API endpoint not accessible"
          fi
          
          # Test critical user journeys
          critical_pages=(
            "/"
            "/about"
            "/contact"
            "/attorneys"
            "/blog"
            "/es"
          )
          
          for page in "${critical_pages[@]}"; do
            if curl -sf "$url$page" -w "%{http_code}" | grep -q "200"; then
              echo "‚úÖ Page $page is accessible"
            else
              echo "‚ùå Page $page returned non-200 status"
              exit 1
            fi
          done

      - name: Performance validation
        run: |
          echo "‚ö° Validating production performance..."
          url="${{ needs.deploy-production.outputs.url }}"
          
          # Measure response times
          response_time=$(curl -o /dev/null -s -w '%{time_total}' "$url")
          echo "Main page response time: ${response_time}s"
          
          if (( $(echo "$response_time > 3.0" | bc -l) )); then
            echo "‚ö†Ô∏è Response time slower than expected: ${response_time}s"
            echo "Consider investigating performance issues"
          else
            echo "‚úÖ Response time acceptable: ${response_time}s"
          fi
          
          # Check if gzip compression is working
          if curl -H "Accept-Encoding: gzip" -s -D- "$url" | grep -q "Content-Encoding: gzip"; then
            echo "‚úÖ Gzip compression is working"
          else
            echo "‚ö†Ô∏è Gzip compression may not be working"
          fi

      - name: SEO and accessibility checks
        run: |
          echo "üîç Running basic SEO and accessibility checks..."
          url="${{ needs.deploy-production.outputs.url }}"
          
          # Check for basic meta tags
          html=$(curl -s "$url")
          if echo "$html" | grep -q "<title>"; then
            echo "‚úÖ Title tag present"
          else
            echo "‚ö†Ô∏è No title tag found"
          fi
          
          if echo "$html" | grep -q 'name="description"'; then
            echo "‚úÖ Meta description present"
          else
            echo "‚ö†Ô∏è No meta description found"
          fi
          
          if echo "$html" | grep -q 'name="robots"'; then
            echo "‚úÖ Robots meta tag present"
          else
            echo "‚ÑπÔ∏è No robots meta tag (may be intentional)"
          fi

      - name: Security headers check
        run: |
          echo "üõ°Ô∏è  Checking security headers..."
          url="${{ needs.deploy-production.outputs.url }}"
          
          headers=$(curl -s -D- "$url" | head -20)
          
          security_headers=(
            "X-Frame-Options"
            "X-Content-Type-Options"
            "Referrer-Policy"
            "Content-Security-Policy"
          )
          
          for header in "${security_headers[@]}"; do
            if echo "$headers" | grep -qi "$header"; then
              echo "‚úÖ $header header present"
            else
              echo "‚ö†Ô∏è $header header missing"
            fi
          done

  rollback-preparation:
    name: Prepare Rollback Strategy
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-monitoring]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Store deployment info for potential rollback
        run: |
          echo "üìã Storing deployment information for rollback preparation..."
          echo "Current deployment: ${{ needs.deploy-production.outputs.url }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Previous stable SHA: $(git rev-parse HEAD~1)"
          
          # In a real scenario, you'd store this in a database or artifact
          echo "Rollback information prepared"

      - name: Deployment status summary
        run: |
          deployment_status="${{ needs.deploy-production.result }}"
          monitoring_status="${{ needs.post-deployment-monitoring.result }}"
          
          echo "## üìä Final Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Production Deployment | ${{ needs.deploy-production.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Monitoring | ${{ needs.post-deployment-monitoring.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ github.event.inputs.environment || 'production' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | ${{ needs.deploy-production.outputs.url || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployed by | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$deployment_status" == "success" && "$monitoring_status" == "success" ]]; then
            echo "üéâ **Production deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Deployment completed with issues - monitor closely**" >> $GITHUB_STEP_SUMMARY
          fi