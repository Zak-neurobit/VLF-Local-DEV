name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - code-analysis
          - dependency-scan
          - secrets-scan
          - container-scan

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  # Code analysis with CodeQL
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code-analysis' || github.event.inputs.scan_type == ''
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript-typescript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          config: |
            paths:
              - src
              - pages
              - app
            paths-ignore:
              - node_modules
              - .next
              - dist
              - coverage
              - __tests__
              - "**/*.test.ts"
              - "**/*.test.tsx"
              - "**/*.spec.ts"
              - "**/*.spec.tsx"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Build application
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        run: |
          # Create minimal build environment for analysis
          cat > .env.local << EOF
          NODE_ENV=production
          NEXT_PUBLIC_APP_URL=https://example.com
          DATABASE_URL=postgresql://analysis:analysis@localhost:5432/analysis
          NEXTAUTH_URL=https://example.com
          NEXTAUTH_SECRET=analysis-secret-key-that-is-at-least-32-characters-long
          OPENAI_API_KEY=sk-analysis-key-for-codeql-only
          SKIP_ENV_VALIDATION=true
          EOF
          
          npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependency-scan' || github.event.inputs.scan_type == ''
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Run npm audit
        run: |
          echo "🔍 Running npm audit for known vulnerabilities..."
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Parse and display results
          cat audit-results.json | jq -r '
            if .vulnerabilities then
              "Found " + (.metadata.vulnerabilities | keys | length | tostring) + " vulnerabilities:",
              (.vulnerabilities | to_entries[] | 
                "- " + .key + ": " + .value.severity + " severity (" + (.value.via | length | tostring) + " issues)"
              )
            else
              "✅ No vulnerabilities found"
            end
          '

      - name: Check for high/critical vulnerabilities
        run: |
          high_critical=$(cat audit-results.json | jq -r '
            if .metadata.vulnerabilities then
              (.metadata.vulnerabilities.high // 0) + (.metadata.vulnerabilities.critical // 0)
            else
              0
            end
          ')
          
          if [ "$high_critical" -gt 0 ]; then
            echo "❌ Found $high_critical high/critical vulnerabilities"
            echo "Please review and fix these vulnerabilities before proceeding"
            exit 1
          else
            echo "✅ No high or critical vulnerabilities found"
          fi

      - name: Snyk vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            audit-results.json
            snyk-results.json
          retention-days: 30

  # Secret scanning
  secrets-scan:
    name: Secrets and Sensitive Data Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets-scan' || github.event.inputs.scan_type == ''
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for comprehensive scanning

      - name: TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          path: ./
          extra_args: --debug --only-verified

      - name: GitLeaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      - name: Custom secrets patterns check
        run: |
          echo "🔍 Checking for custom secret patterns..."
          
          # Check for common secret patterns in source files
          secret_patterns=(
            "password.*=.*['\"][^'\"\s]{8,}['\"]"
            "secret.*=.*['\"][^'\"\s]{16,}['\"]"
            "key.*=.*['\"][^'\"\s]{20,}['\"]"
            "token.*=.*['\"][^'\"\s]{20,}['\"]"
            "api[_-]?key.*=.*['\"][^'\"\s]{20,}['\"]"
          )
          
          found_secrets=false
          for pattern in "${secret_patterns[@]}"; do
            if grep -r -E -i "$pattern" src/ --exclude-dir=node_modules 2>/dev/null; then
              echo "⚠️ Potential secret found matching pattern: $pattern"
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = true ]; then
            echo "❌ Potential secrets found in source code"
            echo "Please review and remove any hardcoded secrets"
            exit 1
          else
            echo "✅ No obvious secret patterns found"
          fi

      - name: Check environment files
        run: |
          echo "🔍 Checking for committed environment files..."
          
          # Ensure no .env files are committed (except examples)
          if find . -name ".env*" -not -name ".env.example" -not -name ".env*.template" -not -path "./node_modules/*" -not -path "./.git/*" | grep -q .; then
            echo "❌ Found .env files in repository!"
            find . -name ".env*" -not -name ".env.example" -not -name ".env*.template" -not -path "./node_modules/*" -not -path "./.git/*"
            echo "Environment files should not be committed to version control"
            exit 1
          else
            echo "✅ No .env files found in repository"
          fi

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'container-scan' || github.event.inputs.scan_type == ''
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          # Create a Dockerfile for security scanning if it doesn't exist
          if [ ! -f Dockerfile ]; then
            cat > Dockerfile << 'EOF'
          FROM node:20-alpine AS base
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production && npm cache clean --force
          COPY . .
          RUN npm run build
          EXPOSE 3000
          CMD ["npm", "start"]
          EOF
          fi
          
          docker build -t security-scan:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Security configuration check
  security-config-check:
    name: Security Configuration Check
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Check Next.js security headers
        run: |
          echo "🔒 Checking Next.js security configuration..."
          
          # Check if next.config.js has security headers
          if [ -f next.config.js ]; then
            if grep -q "X-Frame-Options\|Content-Security-Policy\|X-Content-Type-Options" next.config.js; then
              echo "✅ Security headers found in Next.js config"
            else
              echo "⚠️ Consider adding security headers to next.config.js"
            fi
          else
            echo "⚠️ No next.config.js found"
          fi

      - name: Check TypeScript strict mode
        run: |
          echo "🔒 Checking TypeScript configuration..."
          
          if [ -f tsconfig.json ]; then
            if jq -e '.compilerOptions.strict == true' tsconfig.json > /dev/null; then
              echo "✅ TypeScript strict mode enabled"
            else
              echo "⚠️ Consider enabling TypeScript strict mode for better security"
            fi
            
            if jq -e '.compilerOptions.noImplicitAny == true' tsconfig.json > /dev/null; then
              echo "✅ noImplicitAny enabled"
            else
              echo "⚠️ Consider enabling noImplicitAny"
            fi
          fi

      - name: Check for security-related packages
        run: |
          echo "🔒 Checking for security packages..."
          
          security_packages=(
            "helmet"
            "bcrypt"
            "bcryptjs"
            "argon2"
            "jsonwebtoken"
            "cors"
          )
          
          for package in "${security_packages[@]}"; do
            if npm list "$package" > /dev/null 2>&1; then
              echo "✅ Security package found: $package"
            else
              echo "ℹ️ Security package not found: $package (may not be needed)"
            fi
          done

      - name: Check for unsafe packages
        run: |
          echo "🔒 Checking for potentially unsafe packages..."
          
          unsafe_patterns=(
            "eval"
            "vm2"
            "serialize-javascript"
          )
          
          found_unsafe=false
          for pattern in "${unsafe_patterns[@]}"; do
            if npm list | grep -i "$pattern" > /dev/null 2>&1; then
              echo "⚠️ Potentially unsafe package found: $pattern"
              echo "Please review if this package is necessary and used safely"
              found_unsafe=true
            fi
          done
          
          if [ "$found_unsafe" = false ]; then
            echo "✅ No obviously unsafe packages found"
          fi

  # Security summary report
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secrets-scan, container-scan, security-config-check]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Create security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || needs.codeql-analysis.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Static code analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || needs.dependency-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Vulnerability check |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || needs.secrets-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Secret detection |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '✅ Passed' || needs.container-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Image vulnerability scan |" >> $GITHUB_STEP_SUMMARY
          echo "| Config Check | ${{ needs.security-config-check.result == 'success' && '✅ Passed' || needs.security-config-check.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Security configuration |" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.codeql-analysis.result }}" == "failure" || "${{ needs.dependency-scan.result }}" == "failure" || "${{ needs.secrets-scan.result }}" == "failure" || "${{ needs.container-scan.result }}" == "failure" || "${{ needs.security-config-check.result }}" == "failure" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some security scans failed. Please review and address the issues.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All security scans completed successfully.**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Scan triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "🕒 **Scan completed:** $(date -u)" >> $GITHUB_STEP_SUMMARY