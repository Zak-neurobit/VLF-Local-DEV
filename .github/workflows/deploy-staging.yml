name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if quality checks fail'
        required: false
        default: false
        type: boolean

concurrency:
  group: deploy-staging-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  quality-check:
    name: Pre-deployment Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.force_deploy != 'true'
    outputs:
      should-deploy: ${{ steps.check.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Run critical checks
        run: |
          echo "Running critical pre-deployment checks..."
          npm run lint
          npm run type-check
          npm run test --passWithNoTests

      - name: Check deployment readiness
        id: check
        run: |
          echo "‚úÖ All critical checks passed"
          echo "result=success" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [quality-check]
    if: always() && (needs.quality-check.outputs.should-deploy == 'success' || github.event.inputs.force_deploy == 'true')
    timeout-minutes: 15
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployment URL: $url"

      - name: Update deployment status
        run: |
          echo "## üöÄ Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ‚úÖ Successful" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  post-deploy-tests:
    name: Post-deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          for i in {1..30}; do
            if curl -sf "${{ needs.deploy-staging.outputs.url }}" > /dev/null; then
              echo "‚úÖ Deployment is ready"
              break
            fi
            echo "‚è≥ Waiting... (attempt $i/30)"
            sleep 10
          done

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging environment..."
          
          # Test main page
          if ! curl -sf "${{ needs.deploy-staging.outputs.url }}" > /dev/null; then
            echo "‚ùå Main page is not accessible"
            exit 1
          fi
          echo "‚úÖ Main page is accessible"
          
          # Test API health endpoint
          if curl -sf "${{ needs.deploy-staging.outputs.url }}/api/health" > /dev/null; then
            echo "‚úÖ Health endpoint is working"
          else
            echo "‚ö†Ô∏è Health endpoint not accessible (might not exist)"
          fi
          
          # Test critical pages
          critical_pages=("/" "/about" "/contact")
          for page in "${critical_pages[@]}"; do
            if curl -sf "${{ needs.deploy-staging.outputs.url }}$page" > /dev/null; then
              echo "‚úÖ Page $page is accessible"
            else
              echo "‚ùå Page $page is not accessible"
              exit 1
            fi
          done

      - name: Test performance baseline
        run: |
          echo "Testing basic performance metrics..."
          response_time=$(curl -o /dev/null -s -w '%{time_total}' "${{ needs.deploy-staging.outputs.url }}")
          echo "Response time: ${response_time}s"
          
          if (( $(echo "$response_time > 5.0" | bc -l) )); then
            echo "‚ö†Ô∏è Response time is slower than expected (${response_time}s > 5.0s)"
          else
            echo "‚úÖ Response time is acceptable (${response_time}s)"
          fi

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, post-deploy-tests]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## üìã Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deploy-staging.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.post-deploy-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | ${{ needs.deploy-staging.outputs.url || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: needs.deploy-staging.result == 'failure' || needs.post-deploy-tests.result == 'failure'
        run: |
          echo "‚ùå Staging deployment failed or smoke tests failed"
          echo "Please check the logs and fix issues before retrying"
          exit 1

      - name: Notify on success
        if: needs.deploy-staging.result == 'success' && needs.post-deploy-tests.result == 'success'
        run: |
          echo "‚úÖ Staging deployment completed successfully"
          echo "URL: ${{ needs.deploy-staging.outputs.url }}"