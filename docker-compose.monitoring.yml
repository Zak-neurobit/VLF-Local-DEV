version: '3.8'\n\nservices:\n  # Main application (assumed to be running elsewhere)\n  # This is just for reference - your app should be running separately\n  \n  # Prometheus for metrics collection\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: vlf-prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/etc/prometheus/console_libraries'\n      - '--web.console.templates=/etc/prometheus/consoles'\n      - '--storage.tsdb.retention.time=200h'\n      - '--web.enable-lifecycle'\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Grafana for visualization\n  grafana:\n    image: grafana/grafana:latest\n    container_name: vlf-grafana\n    ports:\n      - \"3001:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin123\n      - GF_USERS_ALLOW_SIGN_UP=false\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning\n      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards\n    depends_on:\n      - prometheus\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # AlertManager for handling alerts\n  alertmanager:\n    image: prom/alertmanager:latest\n    container_name: vlf-alertmanager\n    ports:\n      - \"9093:9093\"\n    volumes:\n      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml\n      - alertmanager_data:/alertmanager\n    command:\n      - '--config.file=/etc/alertmanager/alertmanager.yml'\n      - '--storage.path=/alertmanager'\n      - '--web.external-url=http://localhost:9093'\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Node Exporter for system metrics\n  node_exporter:\n    image: prom/node-exporter:latest\n    container_name: vlf-node-exporter\n    ports:\n      - \"9100:9100\"\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n    command:\n      - '--path.procfs=/host/proc'\n      - '--path.rootfs=/rootfs'\n      - '--path.sysfs=/host/sys'\n      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Custom Socket Health Monitor\n  socket_monitor:\n    build:\n      context: .\n      dockerfile: Dockerfile.monitor\n    container_name: vlf-socket-monitor\n    environment:\n      - MONITOR_URL=http://host.docker.internal:3000\n      - ADMIN_TOKEN=${ADMIN_TOKEN}\n      - PROMETHEUS_PUSHGATEWAY=http://pushgateway:9091\n      - MONITOR_INTERVAL=30\n    depends_on:\n      - pushgateway\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Pushgateway for metrics from batch jobs\n  pushgateway:\n    image: prom/pushgateway:latest\n    container_name: vlf-pushgateway\n    ports:\n      - \"9091:9091\"\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Redis for caching and session storage\n  redis:\n    image: redis:7-alpine\n    container_name: vlf-redis\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    command: redis-server --appendonly yes\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Redis Exporter for Redis metrics\n  redis_exporter:\n    image: oliver006/redis_exporter:latest\n    container_name: vlf-redis-exporter\n    ports:\n      - \"9121:9121\"\n    environment:\n      - REDIS_ADDR=redis:6379\n    depends_on:\n      - redis\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Log aggregation with Loki\n  loki:\n    image: grafana/loki:latest\n    container_name: vlf-loki\n    ports:\n      - \"3100:3100\"\n    volumes:\n      - loki_data:/loki\n      - ./monitoring/loki.yml:/etc/loki/local-config.yaml\n    command: -config.file=/etc/loki/local-config.yaml\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Log shipping with Promtail\n  promtail:\n    image: grafana/promtail:latest\n    container_name: vlf-promtail\n    volumes:\n      - /var/log:/var/log:ro\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\n      - ./monitoring/promtail.yml:/etc/promtail/config.yml\n    command: -config.file=/etc/promtail/config.yml\n    depends_on:\n      - loki\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Uptime monitoring with Uptime Kuma\n  uptime-kuma:\n    image: louislam/uptime-kuma:latest\n    container_name: vlf-uptime-kuma\n    ports:\n      - \"3002:3001\"\n    volumes:\n      - uptime_data:/app/data\n    networks:\n      - monitoring\n    restart: unless-stopped\n  \n  # Jaeger for distributed tracing\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    container_name: vlf-jaeger\n    ports:\n      - \"16686:16686\"\n      - \"14268:14268\"\n    environment:\n      - COLLECTOR_OTLP_ENABLED=true\n    networks:\n      - monitoring\n    restart: unless-stopped\n\nvolumes:\n  prometheus_data:\n  grafana_data:\n  alertmanager_data:\n  redis_data:\n  loki_data:\n  uptime_data:\n\nnetworks:\n  monitoring:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16"