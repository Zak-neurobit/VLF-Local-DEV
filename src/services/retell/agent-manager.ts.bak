import Retell from 'retell-sdk';
import { serviceLogger } from '@/lib/logger';
import { prisma } from '@/lib/prisma';

export class RetellAgentManager {
  private client: Retell;
  private agents: Map<string, string> = new Map();

  constructor() {
    this.client = new Retell({
      apiKey: process.env.RETELL_API_KEY!,
    });
    this.initializeAgents();
  }

  private async initializeAgents() {
    try {
      // Define agent configurations for each practice area
      const agentConfigs = [
        {
          name: 'Immigration Law Assistant',
          practiceArea: 'immigration',
          prompt: `You are a helpful bilingual (English/Spanish) immigration law assistant for Vasquez Law Firm. 
          You help callers with immigration questions, schedule consultations, and provide general information.
          Always be professional, empathetic, and inform callers that specific legal advice requires a consultation.
          Key services: Family petitions, work visas, deportation defense, citizenship, DACA.
          Always collect: Name, phone number, type of immigration issue, preferred language.`,
          voice_id: 'jennifer',
          language: 'en-US',
        },
        {
          name: 'Personal Injury Assistant',
          practiceArea: 'personal-injury',
          prompt: `You are a compassionate personal injury law assistant for Vasquez Law Firm.
          Help injured callers understand their rights and schedule free consultations.
          Be empathetic about their injuries and emphasize our "No fee unless we win" policy.
          Key services: Auto accidents, workplace injuries, slip and fall, medical malpractice.
          Always collect: Name, phone, injury type, date of incident, insurance info if available.`,
          voice_id: 'jennifer',
          language: 'en-US',
        },
        {
          name: 'General Reception Assistant',
          practiceArea: 'general',
          prompt: `You are the main reception assistant for Vasquez Law Firm, a full-service law firm.
          Route callers to the appropriate department or schedule consultations.
          We handle: Immigration, Personal Injury, Workers' Comp, Criminal Defense, Family Law, Traffic.
          Be professional, friendly, and helpful. Collect basic info and determine their legal needs.
          Offices in Raleigh, Charlotte (NC) and Orlando (FL).`,
          voice_id: 'jennifer',
          language: 'en-US',
        },
        {
          name: 'Asistente de Inmigración',
          practiceArea: 'immigration-es',
          prompt: `Eres un asistente legal bilingüe de inmigración para Vasquez Law Firm.
          Ayudas a personas con preguntas de inmigración y programas consultas.
          Sé profesional, empático e informa que consejos legales específicos requieren consulta.
          Servicios: Peticiones familiares, visas de trabajo, defensa contra deportación, ciudadanía, DACA.
          Recolecta: Nombre, teléfono, tipo de problema migratorio, idioma preferido.`,
          voice_id: 'isabel',
          language: 'es-ES',
        },
      ];

      // Create or update agents
      for (const config of agentConfigs) {
        try {
          // Check if agent exists in database
          const existingAgent = await prisma.voiceAgent.findUnique({
            where: { practiceArea: config.practiceArea },
          });

          let agentId: string;

          if (existingAgent && existingAgent.retellAgentId) {
            // Update existing agent
            await this.client.agent.update(existingAgent.retellAgentId, {
              agent_name: config.name,
              prompt_preamble: config.prompt,
              voice_id: config.voice_id,
              language: config.language,
              webhook_url: `${process.env.NEXT_PUBLIC_APP_URL}/api/webhooks/retell`,
              enable_backchannel: true,
              end_call_after_silence_ms: 10000,
              interrupt_sensitivity: 0.8,
            });
            agentId = existingAgent.retellAgentId;
            serviceLogger.info('retell-agent-updated', { agentId, practiceArea: config.practiceArea });
          } else {
            // Create new agent
            const response = await this.client.agent.create({
              agent_name: config.name,
              prompt_preamble: config.prompt,
              voice_id: config.voice_id,
              language: config.language,
              webhook_url: `${process.env.NEXT_PUBLIC_APP_URL}/api/webhooks/retell`,
              enable_backchannel: true,
              end_call_after_silence_ms: 10000,
              interrupt_sensitivity: 0.8,
              llm_model: 'gpt-4',
              ambient_sound: 'office',
              responsiveness: 0.8,
              boosted_keywords: ['emergency', 'urgent', 'deportation', 'detained', 'accident', 'injured'],
            });
            agentId = response.agent_id;
            serviceLogger.info('retell-agent-created', { agentId, practiceArea: config.practiceArea });

            // Save to database
            await prisma.voiceAgent.upsert({
              where: { practiceArea: config.practiceArea },
              update: {
                retellAgentId: agentId,
                name: config.name,
                language: config.language,
                isActive: true,
              },
              create: {
                retellAgentId: agentId,
                practiceArea: config.practiceArea,
                name: config.name,
                language: config.language,
                isActive: true,
              },
            });
          }

          this.agents.set(config.practiceArea, agentId);
        } catch (error) {
          serviceLogger.error('retell-agent-setup-failed', error as Error, { practiceArea: config.practiceArea });
        }
      }

      serviceLogger.info('retell-agents-initialized', { count: this.agents.size });
    } catch (error) {
      serviceLogger.error('retell-agent-initialization-failed', error as Error, {});
    }
  }

  async getAgentForPracticeArea(practiceArea: string): Promise<string | null> {
    // Check cache first
    if (this.agents.has(practiceArea)) {
      return this.agents.get(practiceArea)!;
    }

    // Check database
    const agent = await prisma.voiceAgent.findUnique({
      where: { practiceArea },
    });

    if (agent?.retellAgentId) {
      this.agents.set(practiceArea, agent.retellAgentId);
      return agent.retellAgentId;
    }

    // Default to general agent
    return this.agents.get('general') || null;
  }

  async createPhoneNumber(practiceArea: string, areaCode: string = '919'): Promise<string | null> {
    try {
      const agentId = await this.getAgentForPracticeArea(practiceArea);
      if (!agentId) {
        throw new Error('No agent found for practice area');
      }

      const response = await this.client.phoneNumber.create({
        agent_id: agentId,
        area_code: areaCode,
      });

      // Save phone number to database
      await prisma.phoneNumber.create({
        data: {
          number: response.phone_number,
          practiceArea,
          retellPhoneId: response.phone_number_id,
          isActive: true,
        },
      });

      serviceLogger.info('retell-phone-created', { 
        phoneNumber: response.phone_number,
        practiceArea 
      });

      return response.phone_number;
    } catch (error) {
      serviceLogger.error('retell-phone-creation-failed', error as Error, { practiceArea });
      return null;
    }
  }

  async handleCallEvent(event: any) {
    try {
      const { call_id, event_type, call_status, duration, from_number } = event;

      switch (event_type) {
        case 'call_started':
          await prisma.call.create({
            data: {
              retellCallId: call_id,
              fromNumber: from_number,
              status: 'active',
              startTime: new Date(),
            },
          });
          break;

        case 'call_ended':
          await prisma.call.update({
            where: { retellCallId: call_id },
            data: {
              status: 'completed',
              endTime: new Date(),
              duration,
            },
          });
          break;

        case 'call_analyzed':
          // Store call analysis results
          const { transcript, summary, sentiment } = event;
          await prisma.call.update({
            where: { retellCallId: call_id },
            data: {
              transcript,
              summary,
              sentiment,
            },
          });
          break;
      }

      serviceLogger.info('retell-call-event', { event_type, call_id });
    } catch (error) {
      serviceLogger.error('retell-call-event-error', error as Error, { event });
    }
  }

  async getCallRecording(callId: string): Promise<string | null> {
    try {
      const call = await this.client.call.retrieve(callId);
      return call.recording_url || null;
    } catch (error) {
      serviceLogger.error('retell-recording-fetch-failed', error as Error, { callId });
      return null;
    }
  }

  async getCallTranscript(callId: string): Promise<string | null> {
    try {
      const call = await this.client.call.retrieve(callId);
      return call.transcript || null;
    } catch (error) {
      serviceLogger.error('retell-transcript-fetch-failed', error as Error, { callId });
      return null;
    }
  }
}

export const retellAgentManager = new RetellAgentManager();